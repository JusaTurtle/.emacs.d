#+STARTUP: overview hidestars 
* Use Package + Straight
#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(use-package el-patch
  :straight t)

(setq straight-check-for-modifications '(check-on-save find-when-checking))
#+END_SRC

* Try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

* Evil
#+BEGIN_SRC emacs-lisp
 ;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package evil
  :init
  (setq evil-want-intergration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-d-scroll t)
  :config
  (evil-mode 1)
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line))

#+END_SRC

* File Management
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight nil
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump))
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))

(use-package dired-single)

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
* Ivy-Counsel-Swiper
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind
  (("C-x C-f" . counsel-find-file)
  ("M-x" . counsel-M-x)
  ("C-s" . swiper-isearch)
  :map ivy-minibuffer-map
  ("C-l" . ivy-alt-done)
  ("C-j" . ivy-next-line)
  ("C-k" . ivy-previous-line)
  :map ivy-switch-buffer-map
  ("C-k" . ivy-previous-line)
  ("C-l" . ivy-done)
  ("C-d" . ivy-switch-buffer-kill)
  :map ivy-reverse-i-search-map
  ("C-k" . ivy-previous-line)
  ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (counsel-mode 1))
#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+END_SRC

* language
** Language Servers
#+BEGIN_SRC emacs-lisp
(defun jusa/lsp-mode-setup()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols)) (lsp-headerline-breadcrumb-mode))

(use-package lsp-mode
  :commands lsp 
  :hook 
  ((prog-mode . lsp)
  (lsp-mode . jusa/lsp-mode-setup)
  (lsp-mode . lsp-enable-which-key-integration))
  :init
  (setq lsp-keymap-prefix "C-c l"))

(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC

** Language
*** C/C++
#+BEGIN_SRC emacs-lisp
#+END_SRC

** GDScript
#+BEGIN_SRC emacs-lisp
(use-package gdscript-mode
    :straight (gdscript-mode
               :type git
               :host github
               :repo "GDQuest/emacs-gdscript-mode"))

(defun lsp--gdscript-ignore-errors (original-function &rest args)
  "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
  (if (string-equal major-mode "gdscript-mode")
      (let ((json-data (nth 0 args)))
        (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                 (not (gethash "id" json-data nil))
                 (not (gethash "method" json-data nil)))
            nil ; (message "Method not found")
          (apply original-function args)))
    (apply original-function args)))
;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
(advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
#+END_SRC

** Utilities
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :hook (prog-mode . company-mode)
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))

(defvar +lsp-company-backends 'company-capf
  "The backends to prepend to `company-backends' in `lsp-mode' buffers.
Can be a list of backends; accepts any value `company-backends' accepts.")
#+END_SRC

* Ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
(defun jusa/org-mode-setup()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1)
  (setq evil-auto-indent nil))

(use-package org
  :hook (org-mode . jusa/org-mode-setup))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+END_SRC

* Lisp
** Paredit
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1)
(use-package paredit
  :init
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  :hook
  ((emacs-lisp-mode . paredit-mode)
  (eval-expression-minibuffer-setup . paredit-mode)
  (ielm-mode . paredit-mode)
  (lisp-mode . paredit-mode)
  (lisp-interaction-mode . paredit-mode)
  (scheme-mode . paredit-mode)
  (geiser-repl-mode . paredit-mode)
  (inferior-scheme-mode . paredit-mode)))
#+END_SRC
** Scheme
#+BEGIN_SRC emacs-lisp
(global-font-lock-mode 1) 
(setq show-paren-delay 0 show-paren-style 'parenthesis) (show-paren-mode 1) 
(setq scheme-program-name "mzscheme")
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
(use-package evil-magit
  :after magit)

;; fix server bug on window
(require 'server)
 (and (>= emacs-major-version 23)
     (defun server-ensure-safe-dir (dir) "Noop" t))
#+END_SRC

* Tweaks
** General
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(set-fringe-mode 10)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config (load-theme 'doom-solarized-dark t))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Code Retina" :height 100)
(set-fontset-font t nil "symbola" nil 'append)
#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
;; all-the-icons fonts required
(use-package all-the-icons)
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 1)
  (set-face-attribute 'mode-line nil :height 90))
#+END_SRC

** Auto Save
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist 
      '(("." . "~/.emacs-saves")))
#+END_SRC

** Keybind
#+BEGIN_SRC emacs-lisp
#+END_SRC

